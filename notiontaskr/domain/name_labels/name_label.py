from abc import ABC, abstractmethod
from dataclasses import dataclass

from typing import List

from notiontaskr.domain.name_labels.label_registerable import LabelRegisterable
from notiontaskr.util.converter import remove_variant_selectors


@dataclass
class NameLabel(ABC):
    """タスク名のラベルクラス"""

    key: str
    value: str

    def __str__(self) -> str:
        return f"[{self.key}{self.value}]"

    @classmethod
    @abstractmethod
    def parse_and_register(cls, key: str, value: str, delegate: "LabelRegisterable"):
        """ラベルを解析してdelegeteのメンバへ登録する"""
        pass

    @staticmethod
    def parse_labels(label: str, delegate: "LabelRegisterable"):
        """ラベルを解析してdelegateのメンバへ登録する

        chain of responsibleパターンで検索する
        """
        from notiontaskr.domain.name_labels.id_label import IdLabel
        from notiontaskr.domain.name_labels.man_hours_label import ManHoursLabel
        from notiontaskr.domain.name_labels.parent_id_label import ParentIdLabel

        label = remove_variant_selectors(label)  # バリアントセレクタを除去

        key = label[0]  # 最初の文字をキーとする
        value = remove_variant_selectors(label[1:])  # 2文字目以降を値とする

        # 検索対象のクラスを配列に格納
        # Generated by Copilot
        handlers: List[type["NameLabel"]] = [
            IdLabel,
            ManHoursLabel,
            ParentIdLabel,
        ]

        # ID以外のラベルを登録
        for handler in handlers:
            try:
                handler.parse_and_register(key, value, delegate)
                return
            except ValueError:
                continue

    def __eq__(self, other: "object"):
        if not isinstance(other, NameLabel):
            return False
        return self.key == other.key and self.value == other.value
