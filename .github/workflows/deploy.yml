name: Deploy
  
on:
  workflow_run:
    workflows: ["Test"]
    types:
      - completed

env:
  SERVICE_NAME: ${{vars.SERVICE_NAME}}  # SERVICE_NAME はサービス名
  REGULAR_JOB_NAME: ${{ vars.REGULAR_JOB_NAME }}  # REGULAR_JOB_NAME はレギュラージョブ名
  DAILY_JOB_NAME: ${{ vars.DAILY_JOB_NAME }}  # DAILY_JOB_NAME はデイリージョブ名
  SERVICE_ACCOUNT_NAME: ${{ secrets.SERVICE_ACCOUNT_NAME }}  # SERVICE_ACCOUNT_NAME はサービスアカウント名
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}  # GCP_PROJECT_ID はプロジェクト ID
  GCP_REGION: ${{ secrets.GCP_REGION }}  # GCP_REGION は us-central1 といったリージョン名
  GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}  # GCP_SA_KEY はサービスアカウントキー
  SERVICE_IMAGE: ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_REPO_NAME }}/${{ vars.SERVICE_NAME }}-service  # サービス用のDockerイメージ名
  REGULAR_JOB_IMAGE: ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_REPO_NAME }}/${{ vars.REGULAR_JOB_NAME }}-regular_job  # ジョブ用のDockerイメージ名
  DAILY_JOB_IMAGE: ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_REPO_NAME }}/${{ vars.DAILY_JOB_NAME }}-daily_job  # ジョブ用のDockerイメージ名
  NOTION_TOKEN: ${{ secrets.NOTION_TOKEN }}
  TASK_DB_ID: ${{ secrets.TASK_DB_ID }}  # NotionのデータベースID
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}  # SlackのWebhook URL
 
jobs:
  deploy:
    # テストが成功した場合、かつmainブランチにpushされた場合のみ実行
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - id: "auth"
      uses: "google-github-actions/auth@v2"
      with:
        credentials_json: "${{ env.GCP_SA_KEY }}"

    # gcloud の設定
    - name: Configure docker to use the gcloud cli
      run: gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev --quiet

    # 古いイメージを削除
    - name: Delete old service image
      continue-on-error: true
      run: gcloud artifacts docker images delete ${{ env.SERVICE_IMAGE }} --quiet

    - name: Delete old job image
      continue-on-error: true
      run: gcloud artifacts docker images delete ${{ env.REGULAR_JOB_IMAGE }} --quiet

    - name: Delete old job image
      continue-on-error: true
      run: gcloud artifacts docker images delete ${{ env.DAILY_JOB_IMAGE }} --quiet

    # サービスジョブのビルド
    - name: Build service docker image
      run: |
        docker build -t ${{ env.SERVICE_IMAGE }} -f Dockerfile.service .

    # レギュラージョブのビルド
    - name: Build job docker image
      run: |
        docker build -t ${{ env.REGULAR_JOB_IMAGE }} -f Dockerfile.regular.job .

    # デイリージョブのビルド
    - name: Build job docker image
      run: |
        docker build -t ${{ env.DAILY_JOB_IMAGE }} -f Dockerfile.daily.job .

    # Dockerイメージをプッシュ
    - name: Push service docker image
      run: docker push ${{ env.SERVICE_IMAGE }}

    - name: Push job docker image
      run: docker push ${{ env.REGULAR_JOB_IMAGE }}

    - name: Push job docker image
      run: docker push ${{ env.DAILY_JOB_IMAGE }}

    # Cloud Run にデプロイ
    - name: Deploy to Cloud Run (Service)
      run: |
        gcloud run deploy $SERVICE_NAME \
          --image $SERVICE_IMAGE \
          --project $GCP_PROJECT_ID \
          --region $GCP_REGION \
          --service-account $SERVICE_ACCOUNT_NAME \
          --platform managed \
          --set-env-vars NOTION_TOKEN=${{ env.NOTION_TOKEN }},TASK_DB_ID=${{ env.TASK_DB_ID }},SLACK_WEBHOOK_URL=${{ env.SLACK_WEBHOOK_URL }} \
          --allow-unauthenticated

    # ジョブをCloud Runにデプロイ（作成または更新） 
    - name: Deploy to Cloud Run (Regular Job)
      run: |
        if gcloud run jobs describe $REGULAR_JOB_NAME --region $GCP_REGION --project $GCP_PROJECT_ID > /dev/null 2>&1; then
          echo "Updating existing job..."
          gcloud run jobs update $REGULAR_JOB_NAME \
            --image $REGULAR_JOB_IMAGE \
            --project $GCP_PROJECT_ID \
            --region $GCP_REGION \
            --service-account $SERVICE_ACCOUNT_NAME \
            --task-timeout=50s \
            --max-retries=0 \
            --set-env-vars NOTION_TOKEN=${{ env.NOTION_TOKEN }},TASK_DB_ID=${{ env.TASK_DB_ID }},SLACK_WEBHOOK_URL=${{ env.SLACK_WEBHOOK_URL }} \
            --tasks=1
        else
          echo "Creating new job..."
          gcloud run jobs create $REGULAR_JOB_NAME \
            --image $REGULAR_JOB_IMAGE \
            --project $GCP_PROJECT_ID \
            --region $GCP_REGION \
            --service-account $SERVICE_ACCOUNT_NAME \
            --task-timeout=50s \
            --max-retries=0 \
            --set-env-vars NOTION_TOKEN=${{ env.NOTION_TOKEN }},TASK_DB_ID=${{ env.TASK_DB_ID }},SLACK_WEBHOOK_URL=${{ env.SLACK_WEBHOOK_URL }} \
            --tasks=1
        fi

    # ジョブをCloud Runにデプロイ（作成または更新） 
    - name: Deploy to Cloud Run (Daily Job)
      run: |
        if gcloud run jobs describe $DAILY_JOB_NAME --region $GCP_REGION --project $GCP_PROJECT_ID > /dev/null 2>&1; then
          echo "Updating existing job..."
          gcloud run jobs update $DAILY_JOB_NAME \
            --image $DAILY_JOB_IMAGE \
            --project $GCP_PROJECT_ID \
            --region $GCP_REGION \
            --service-account $SERVICE_ACCOUNT_NAME \
            --task-timeout=50s \
            --max-retries=0 \
            --set-env-vars NOTION_TOKEN=${{ env.NOTION_TOKEN }},TASK_DB_ID=${{ env.TASK_DB_ID }},SLACK_WEBHOOK_URL=${{ env.SLACK_WEBHOOK_URL }} \
            --tasks=1
        else
          echo "Creating new job..."
          gcloud run jobs create $DAILY_JOB_NAME \
            --image $DAILY_JOB_IMAGE \
            --project $GCP_PROJECT_ID \
            --region $GCP_REGION \
            --service-account $SERVICE_ACCOUNT_NAME \
            --task-timeout=50s \
            --max-retries=0 \
            --set-env-vars NOTION_TOKEN=${{ env.NOTION_TOKEN }},TASK_DB_ID=${{ env.TASK_DB_ID }},SLACK_WEBHOOK_URL=${{ env.SLACK_WEBHOOK_URL }} \
            --tasks=1
        fi

    - name: run daily job
      run: |
        curl -X POST https://${{ env.SERVICE_NAME }}-${{  env.GCP_PROJECT_ID }}.${{ env.GCP_REGION }}.run.app/run-daily-task \
          -H "Content-Type: application/json" \
          -d '{"task": "daily"}'

